{
	"info": {
		"_postman_id": "354a561d-cab9-4818-abdd-cee1afaf6a22",
		"name": "Tutor Time Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44610155",
		"_collection_link": "https://ishtiakemon.postman.co/workspace/Ishtiak-Emon's-Workspace~f66c1457-9a0b-422c-86bf-2cceaf0fa254/collection/44610155-354a561d-cab9-4818-abdd-cee1afaf6a22?action=share&source=collection_link&creator=44610155"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Fetch all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code\r",
									"pm.test(\"Can fetch all users successfully \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check response time\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"// Check that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Check that at least one user has required fields\r",
									"pm.test(\"All users have required fields\", function () {\r",
									"    let users = pm.response.json();\r",
									"    pm.expect(users).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"    users.forEach(user => {\r",
									"        pm.expect(user).to.have.property(\"name\");\r",
									"        pm.expect(user).to.have.property(\"email\");\r",
									"        pm.expect(user).to.have.property(\"image\");\r",
									"        pm.expect(user).to.have.property(\"createdAt\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This request retrieves all registered users from the database.\r\nIt is used to validate the /users endpoint of the Tutor Time platform.\r\nThe response should return an array of user objects, each containing the following fields:\r\n\r\nname (string)\r\n\r\nemail (string)\r\n\r\nimage (URL string)\r\n\r\ncreatedAt (timestamp string)\r\n"
					},
					"response": []
				},
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check response status\r",
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// Check response body is JSON\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Parse the response\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check if result contains insertedId or acknowledged\r",
									"pm.test(\"User inserted successfully\", function () {\r",
									"    pm.expect(jsonData).to.have.any.keys(\"insertedId\", \"acknowledged\");\r",
									"    pm.expect(jsonData.acknowledged).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Ishtiak Billah Emon\",\r\n  \"image\": \"https://ibb.co.com/1TwG0fq\",\r\n  \"email\": \"ishtiakTestAPI@gmail.com\",\r\n  \"createdAt\": \"Thu, 01 May 2025 12:34:56 GMT\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status is 200 (success)\r",
									"pm.test(\"Can update user details\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"// Confirm response is JSON\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Parse the response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Validate that the update was acknowledged\r",
									"pm.test(\"User update acknowledged\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"acknowledged\", true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Ishtiak Billah\",\r\n  \"image\": \"https://ibb.co.com/1TwG0fq\",\r\n  \"email\": \"ishtiakTestAPI@gmail.com\"\r\n  \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Get all tutorials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check status code\r",
									"pm.test(\"Can fetch all the tutorials successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check response time\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"// Check that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// check the fields\r",
									"pm.test(\"All tutorials have required fields\", function () {\r",
									"    let users = pm.response.json();\r",
									"\r",
									"    pm.expect(users).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"    users.forEach(user => {\r",
									"        pm.expect(user).to.have.property(\"name\");\r",
									"        pm.expect(user).to.have.property(\"email\");\r",
									"        pm.expect(user).to.have.property(\"photo\");\r",
									"        pm.expect(user).to.have.property(\"language\");\r",
									"        pm.expect(user).to.have.property(\"price\");\r",
									"        pm.expect(user).to.have.property(\"description\");\r",
									"        pm.expect(user).to.have.property(\"rating\");\r",
									"        pm.expect(user).to.have.property(\"review\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tutorials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutorials"
							]
						},
						"description": "This request fetches all tutorials available in the platform from the tutorials collection.\r\nIt targets the /tutorials endpoint and optionally supports filtering by language using the category query parameter (e.g., /tutorials?category=english).\r\n\r\nEach tutorial object in the response should include:\r\n\r\nname (string) – Tutor's name\r\n\r\nemail (string) – Tutor's email\r\n\r\nphoto (URL string) – Image of the tutor/tutorial\r\n\r\nlanguage (string) – Language being taught\r\n\r\nprice (number) – Hourly/session rate\r\n\r\ndescription (string) – Overview of the tutorial\r\n\r\nreview (number) – Number of reviews "
					},
					"response": []
				},
				{
					"name": "Search tutorial by language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutorials?category=Spanish",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutorials"
							],
							"query": [
								{
									"key": "category",
									"value": "Spanish"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Tutorial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"Faisal Ahmed\",\r\n        \"email\": \"faisal01@gmail.com1\",\r\n        \"photo\": \"https://i.ibb.co.com/T2kVmRc/My.jpg\",\r\n        \"language\": \"English\",\r\n        \"price\": \"35\",\r\n        \"description\": \"I'm a native teacher with over 5 years of experience in language teaching, including 3 year of teaching English, a degree in Psychology and a passion for the nuances of pronunciation and the art of writing.\",\r\n        \"rating\": \"5\",\r\n        \"review\": \"0\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tutorials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutorials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update / Insert Tutorial ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"Faisal Ahmed\",\r\n        \"email\": \"faisal01@gmail.com1\",\r\n        \"photo\": \"https://i.ibb.co.com/T2kVmRc/My.jpg\",\r\n        \"language\": \"English\",\r\n        \"price\": \"25\",\r\n        \"description\": \"I'm a native teacher with over 5 years of experience in language teaching, including 3 year of teaching English, a degree in Psychology and a passion for the nuances of pronunciation and the art of writing.\",\r\n        \"rating\": \"5\",\r\n        \"review\": \"0\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/updateTutorial/6818e5149259db283c67bd2f",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"updateTutorial",
								"6818e5149259db283c67bd2f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tutorial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tutorials/6818e5149259db283c67bd2f",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tutorials",
								"6818e5149259db283c67bd2f"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booked Tutorials",
			"item": [
				{
					"name": "Get all the booked Tutorials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bookedTutorial",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookedTutorial"
							]
						}
					},
					"response": []
				},
				{
					"name": "Book a tutorial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Mauro\",\r\n        \"email\": \"mauro@gmail.com\",\r\n        \"photo\": \"https://i.ibb.co.com/GtwBK2k/man2.jpg\",\r\n        \"language\": \"Portugese\",\r\n        \"price\": \"17\",\r\n        \"description\": \"Tutor with 3 years of experience. Learn Portuguese with a teacher always ready to help and make sure you're always improving!\",\r\n        \"rating\": \"4\",\r\n        \"review\": \"0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/bookedTutorial",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookedTutorial"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the booked tutorial by user email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/bookedTutorial/daniel@gmail.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bookedTutorial",
								"daniel@gmail.com"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}